set nocompatible

"""""""""""""""""""""""
" BEHAVIORAL SETTINGS "
"""""""""""""""""""""""

" Allow backspacing over anything in insert mode
set backspace=indent,eol,start
" Show (partial) command in status line.
set showcmd
" Show matching brackets.
set showmatch
" Do case insensitive matching
set ignorecase
" Do smart case matching
set smartcase
" Search highlighting enabled
set hlsearch
" Allow resizing of the window on session restore
set sessionoptions+=resize
" Give popup menus for a right mouse-click
set mousemodel=popup
" Hide buffers when they are not displayed; this prevents warning messages
" about modified buffers when switching between them.
set hidden
" Set the spelling language to US English.
set spelllang=en_us
" Highlight the line on which the cursor lies
set cursorline
" Show line numbers
set number
" Don't show insert mode; taken care of by lightline
set noshowmode
" Expand the status line for lightline
set laststatus=2

" Use the persistent undo feature
" See :h persistent-undo
" NOTE: the directory listed in undodir must exist; Vim will not create this
" directory itself!
set undodir=~/.vimundos
set undofile
" Maximum number of changes that can be undone
set undolevels=1000
" Maximum number lines to save for undo on a buffer reload
set undoreload=10000

" Decrease the time to update the swap file
set updatetime=500

" Enable concealing, for example, rendering bold text in Markdown but hiding
" the the asterisks
set conceallevel=2

" Set completion options
set completeopt=menu,menuone,noinsert,noselect


""""""""""""
" MAPPINGS "
""""""""""""

" Set the leader
let mapleader = ','

" Get to command mode easier
nnoremap ; :
vnoremap ; :

" Easy access keystrokes for editing your Vim configuration
nnoremap <leader>svrc :source $MYVIMRC<CR>
nnoremap <leader>vrc :e $MYVIMRC<CR>

" Quickly switch buffers
nnoremap <silent> <leader>nn :bn<CR>
nnoremap <silent> <leader>pp :bp<CR>
nnoremap <silent> <leader>bd :bd<CR>

" Change the current directory to the directory of the current buffer
nnoremap <silent> <leader>cdb :lcd %:p:h<CR>

" Change the current directory to the project directory

" Let j and k move up and down over line-wrapped lines, too.
nnoremap j gj
nnoremap k gk

" I want to quickly switch to text settings sometimes.
nnoremap <leader>txt :setlocal ai et sts=4 sw=4 ts=4 tw=78 spell<CR>

" Turn off highlighted search terms
nnoremap <silent> <leader>/ :nohlsearch<CR>

" Insert a timestamp
nnoremap <F5> a<C-R>=strftime("%F")<CR><Esc>
inoremap <F5> <C-R>=strftime("%F")<CR>

" Quickly switch spelling on and off.
nnoremap <leader>spl :setlocal spell!<CR>

" Make it easy to toggle folding
nnoremap <space> za
vnoremap <space> zf


""""""""""""""""""""
" autocmd settings "
""""""""""""""""""""

if has("autocmd")
  " Start editing a previously opened file from the position of the most
  " recent edit.
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
  " Recognize VTL
  autocmd BufNewFile,BufRead *.vtl set ft=velocity
endif

" Help Neovim check if file has changed on disc
" https://github.com/neovim/neovim/issues/2127
augroup checktime
    autocmd!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter,FocusGained,BufEnter,FocusLost,WinLeave * checktime
    endif
augroup END


"""""""""""""""""""
" INSTALL PLUGINS "
"""""""""""""""""""
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('~/.cache/dein/')
  call dein#begin('~/.cache/dein', ['~/.config/init.vim', '~/.vimrc'])

  " Let dein manage dein
  call dein#add('Shougo/dein.vim')
  call dein#add('haya14busa/dein-command.vim')

  " Productivity
  if !has('nvim')
    call dein#add('roxma/vim-hug-neovim-rpc')
    call dein#add('roxma/nvim-yarp')
  endif
  call dein#add('Shougo/denite.nvim')
  call dein#add('gotgenes/fruzzy',
        \ {'rev': 'increase-limit', 'hook_post_update': 'call fruzzy#install()'})
  call dein#add('Shougo/neoyank.vim')

  call dein#add('schickling/vim-bufonly')
  call dein#add('Shougo/defx.nvim')
  call dein#add('kristijanhusak/defx-icons')
  call dein#add('kristijanhusak/defx-git')
  call dein#add('ntpeters/vim-better-whitespace')
  call dein#add('dbakker/vim-projectroot')
  call dein#add('vim-scripts/utl.vim')
  call dein#add('tpope/vim-repeat')
  call dein#add('tpope/vim-surround')
  call dein#add('tpope/vim-unimpaired')
  call dein#add('itchyny/lightline.vim')
  call dein#add('chriskempson/base16-vim')
  call dein#add('gotgenes/base16-lightline.vim')
  call dein#add('AndrewRadev/splitjoin.vim')
  call dein#add('embear/vim-localvimrc')
  if has('nvim')
    call dein#add('norcalli/nvim-colorizer.lua')
    call dein#add('ncm2/float-preview.nvim')
  endif

  " Git
  call dein#add('tpope/vim-fugitive')
  call dein#add('airblade/vim-gitgutter')
  call dein#add('gregsexton/gitv')

  " CI
  call dein#add('martinda/Jenkinsfile-vim-syntax')

  " Programming
  call dein#add('Shougo/deoplete.nvim')
  call dein#add('Shougo/echodoc.vim')
  call dein#add('autozimu/LanguageClient-neovim', {'build': 'bash install.sh'})
  call dein#add('scrooloose/syntastic')
  call dein#add('scrooloose/nerdcommenter')
  call dein#add('SirVer/ultisnips')
  call dein#add('honza/vim-snippets')
  call dein#add('majutsushi/tagbar')
  call dein#add('cohama/lexima.vim')
  call dein#add('Konfekt/FastFold')

  " Go
  call dein#add('fatih/vim-go')
  call dein#add('gotgenes/golang-template.vim')

  " HTML
  call dein#add('tmhedberg/matchit')
  call dein#add('othree/html5.vim')
  call dein#add('alvan/vim-closetag')

  " CSS / SASS
  call dein#add('hail2u/vim-css3-syntax')
  call dein#add('cakebaker/scss-syntax.vim')

  " GraphQL
  call dein#add('jparise/vim-graphql')

  " JavaScript
  call dein#add('pangloss/vim-javascript')
  call dein#add('maxmellon/vim-jsx-pretty')

  " LaTeX
  call dein#add('lervag/vimtex')

  " Markdown
  call dein#add('godlygeek/tabular')
  call dein#add('plasticboy/vim-markdown')
  call dein#add('iamcco/markdown-preview.nvim', {'on_ft': ['markdown', 'pandoc.markdown', 'rmd'],
        \ 'build': 'sh -c "cd app & yarn install"' })

  " Python
  call dein#add('tmhedberg/SimpylFold')
  call dein#add('hynek/vim-python-pep8-indent')

  " Terraform
  call dein#add('hashivim/vim-terraform')

  " TOML
  call dein#add('cespare/vim-toml')

  " TypeScript
  call dein#add('leafgarland/typescript-vim')
  call dein#add('peitalin/vim-jsx-typescript')
  call dein#add('Quramy/tsuquyomi')

  " Velocity
  call dein#add('lepture/vim-velocity')

  " xonsh
  call dein#add('meatballs/vim-xonsh')

  " C#
  call dein#add('OmniSharp/omnisharp-vim')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

if dein#check_install()
  call dein#install()
endif


""""""""""""""""""""""""""
" PLUGINS CONFIGURATIONS "
""""""""""""""""""""""""""

" lightline configuration
let g:lightline = {
      \ 'colorscheme': 'base16_eighties',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified'] ]
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'fugitive': 'LightlineFugitive',
      \   'mode': 'LightlineMode',
      \   'readonly': 'LightlineReadonly',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \}

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'RO' : ''
endfunction

function! LightlineFilename()
  return (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'denite' ? denite#get_status('sources') :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]')
endfunction

function! LightlineFugitive()
  try
    if expand('%:t') !~? 'denite\|Tagbar\|NERD' && exists('*FugitiveHead')
      let mark = ' '  " edit here for cool mark
      let branch = FugitiveHead()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightlineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'denite' ? 'Denite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'
function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction


" utl configuration
let g:utl_cfg_hdl_scm_http_system = "silent !open %u"
nnoremap <leader>gu :Utl openLink underCursor edit<CR>
nnoremap <leader>cl :Utl copyLink underCursor<CR>


" NERDCommenter configuration
" Prevent NERDCommenter from complaining about unrecognized filetypes.
let NERDShutUp=1


" defx configuration
autocmd BufWritePost * call defx#redraw()
nnoremap <silent><leader>dt :Defx -toggle -split=vertical -winwidth=50 -direction=topleft<CR>
call defx#custom#option('_', {
      \ 'columns': 'indent:icons:filename:type:git',
      \ })
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
        \ defx#is_directory() ?
        \ defx#do_action('open_tree', 'toggle') :
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
endfunction


" Tagbar configuration
nnoremap <leader>tb :TagbarToggle<CR>


" UltiSnips configuration
let g:UltiSnipsExpandTrigger = "<C-S>"
let g:UltiSnipsJumpForwardTrigger = "<C-,>"
let g:UltiSnipsJumpBackwardTrigger = "<C-.>"

let g:ultisnips_python_style = "sphinx"


" vim-better-whitespace configuration
nnoremap <silent> <leader>rws :ToggleStripWhitespaceOnSave<CR>
nnoremap <silent> <leader>hws :ToggleWhitespace<CR>

if has("autocmd")
  autocmd BufEnter * EnableStripWhitespaceOnSave
endif

highlight link ExtraWhitespace Error


" Syntastic configuration
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_wq = 0


" LanguageClient configuration
let g:LanguageClient_serverCommands = {
      \ 'python': ['pyls'],
      \ 'javascript': ['javascript-typescript-stdio'],
      \ 'typescript': ['javascript-typescript-stdio'],
      \ 'javascript.jsx': ['javascript-typescript-stdio'],
      \ 'typescript.tsx': ['javascript-typescript-stdio'],
      \ }

let g:LanguageClient_rootMarkers = {
      \ 'javascript': ['jsconfig.json'],
      \ 'typescript': ['tsconfig.json'],
      \ }

function LC_maps()
  if has_key(g:LanguageClient_serverCommands, &filetype)
    nnoremap <buffer> <silent> <leader>lcd :call LanguageClient#textDocument_hover()<cr>
    nnoremap <buffer> <silent> <leader>lcg :call LanguageClient#textDocument_definition()<CR>
    nnoremap <buffer> <silent> <leader>lcr :call LanguageClient#textDocument_rename()<CR>
  endif
endfunction

autocmd FileType * call LC_maps()


" deoplete configuration
let g:deoplete#enable_at_startup = 1

call deoplete#custom#source('_', 'converters',
      \['converter_remove_overlap',
      \ 'converter_truncate_abbr',
      \ 'converter_truncate_menu',
      \ 'converter_remove_paren',
      \ 'converter_auto_delimiter'])

call deoplete#custom#option('num_processes', -1)

autocmd FileType denite-filter
      \ call deoplete#custom#buffer_option('auto_complete', v:false)

inoremap <expr> <C-G> deoplete#undo_completion()
" tab-completion
inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-N>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-P>" : "\<C-H>"


" float-preview configuration
let g:float_preview#docked = 0


" echodock configuration
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'


" SimpylFold configuration
let g:SimpylFold_fold_docstring = 0


" projectroot settings
nnoremap <silent> <leader>cdp :ProjectRootCD<CR>
nnoremap <silent> <leader>ntp :ProjectRootExe NERDTreeFind<CR>


" fruzzy settings
let g:fruzzy#usenative = 1
let g:fruzzy#sortonempty = 0


" Denite settings
autocmd FileType denite call s:denite_my_mappings()
function! s:denite_my_mappings() abort
  nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> a
    \ denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> dd
    \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> <C-l>
    \ denite#do_map('redraw')
  nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select')
endfunction

call denite#custom#source('_', 'matchers', ['matcher/fruzzy'])
call denite#custom#source('file,file/rec', 'sorters', ['sorter/rank'])

if executable('rg')
  call denite#custom#var('file/rec', 'command',
        \ ['rg', '--files', '--hidden', '--glob', '!.git', '--color', 'never'])
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep', '--no-heading'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
elseif executable('ag')
  call denite#custom#var('file/rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '--ignore', '.git', '-g', ''])
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
endif

nnoremap <silent> <leader>db :<C-u>Denite buffer<CR>
nnoremap <silent> <leader>df :<C-u>Denite -start-filter file/rec<CR>
nnoremap <silent> <leader>dp :<C-u>DeniteProjectDir -start-filter file/rec<CR>
nnoremap <silent> <leader>dg :<C-u>Denite grep<CR><CR>
nnoremap <silent> <leader>dh :<C-u>Denite -start-filter help<CR>
nnoremap <silent> <leader>dy :<C-u>Denite neoyank<CR>
nnoremap <silent> <leader>dr :<C-u>Denite -resume<CR>


" vimtex configuration
let g:tex_flavor = 'latex'


" vim-markdown configuration
let g:vim_markdown_folding_disabled = 1


" base16 configuration
let g:base16colorspace=256

""""""""""""""""""""""""""""""""""""""""""
" Syntax highlighting and color settings "
""""""""""""""""""""""""""""""""""""""""""

if has('termguicolors')
  set termguicolors
endif

colorscheme base16-eighties
highlight HtmlBold gui=bold
highlight HtmlItalic gui=italic
